/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlybienbanclientView;

import entity.Meeting;
import entity.User;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import quanlybienbanclientController.MeetingController;
import quanlybienbanclientController.UserController;

/**
 *
 * @author thanhdovan
 */
public class GUIReporter extends javax.swing.JFrame {
    private final UserController userController;
    private final MeetingController meetingController;
    public static Meeting meeting;
    public static void updateReporterTable(List<User> reporters){
        Object[] column = {"UserId", "Username", "User Position"};
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(column);
        try {
            for (User u : reporters ){
                Object[] row = {u.getId(), u.getUsername(), u.getPosition()};
                model.addRow(row);
            }
            GUIReporter.reporterTable.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(GUIAdminClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Creates new form GUIReporter
     */
    public GUIReporter() {
        userController = new UserController();
        meetingController = new MeetingController();
        initComponents();
        this.jLabel3.setText("for MID"+ meeting.getId());
        List<Integer> reporterIds = meetingController.getReporterIds(GUIReporter.meeting.getId());
        List<User> reporters = new ArrayList<>();
        if (reporterIds != null){
            for (Integer reporterId : reporterIds){

                User reporter = userController.getUser(reporterId);
                reporters.add(reporter);
            }
        }
        GUIReporter.updateReporterTable(reporters);
        
        List<Integer> userIds = new ArrayList<>();
        List<User> users = userController.getUsers();
        
        for (User u : users){
            userIds.add(u.getId());
        }
        
        userIds.removeAll(reporterIds);
        for (int i : userIds){
            User u = userController.getUser(i);
            if("staff".equals(u.getPosition())){
                        this.selectReporterComboBox.addItem(u.getId()+" - "+u.getUsername());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reporterTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        selectReporterComboBox = new javax.swing.JComboBox<>();
        addReporterButton = new javax.swing.JButton();
        deleteReporterButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Reporter manager");

        reporterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Id", "User Name", "User Position"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reporterTable);

        jLabel2.setText("Add reporter");

        addReporterButton.setText("Add");
        addReporterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReporterButtonActionPerformed(evt);
            }
        });

        deleteReporterButton.setText("Delete");
        deleteReporterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReporterButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("for MIDXX");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectReporterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addReporterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteReporterButton)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(closeButton)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteReporterButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectReporterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addReporterButton))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        GUIReporter.meeting = null;
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void deleteReporterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReporterButtonActionPerformed
        int row = GUIReporter.reporterTable.getSelectedRow();
        if (row != -1){
            if(JOptionPane.showConfirmDialog(rootPane, "Are you sure?", "", JOptionPane.YES_NO_OPTION) == 0){
                int userId = Integer.parseInt(GUIReporter.reporterTable.getValueAt(row, 0).toString());
                User reporter = userController.getUser(userId);
                int result = meetingController.deleteReporter(reporter, GUIReporter.meeting);
                if (result == 0){
                    JOptionPane.showMessageDialog(rootPane, "Failed! Try again!");
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "Success!");
                    this.selectReporterComboBox.removeAllItems();
                }
                List<Integer> reporterIds = meetingController.getReporterIds(GUIReporter.meeting.getId());
                List<User> reporters = new ArrayList<>();
                if (reporterIds != null){
                    for (Integer reporterId : reporterIds){
                        User reporterx = userController.getUser(reporterId);
                        reporters.add(reporterx);
                    }
                }
                GUIReporter.updateReporterTable(reporters);

                List<Integer> userIds = new ArrayList<>();
                List<User> users = userController.getUsers();

                for (User u : users){
                    userIds.add(u.getId());
                }

                userIds.removeAll(reporterIds);
                for (int i : userIds){
                    User u = userController.getUser(i);
                    if("staff".equals(u.getPosition())){
                                this.selectReporterComboBox.addItem(u.getId()+" - "+u.getUsername());
                    }
                }
            }
        } else {
            JOptionPane.showConfirmDialog(rootPane, "Choose a reporter first!");
        }
    }//GEN-LAST:event_deleteReporterButtonActionPerformed

    private void addReporterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReporterButtonActionPerformed
        User reporter = userController.getUser(Integer.parseInt(this.selectReporterComboBox.getItemAt(this.selectReporterComboBox.getSelectedIndex()).substring(0,1)));
        int result = meetingController.addReporter(reporter, GUIReporter.meeting);
        if (result == 0){
            JOptionPane.showMessageDialog(rootPane, "Failed! Try again!");
            return;
        } else {
            JOptionPane.showMessageDialog(rootPane, "Success!");
            this.selectReporterComboBox.removeAllItems();
        }
        
        List<Integer> reporterIds = meetingController.getReporterIds(GUIReporter.meeting.getId());
        List<User> reporters = new ArrayList<>();
        if (reporterIds != null){
            for (Integer reporterId : reporterIds){
                User reporterx = userController.getUser(reporterId);
                reporters.add(reporterx);
            }
        }
        GUIReporter.updateReporterTable(reporters);
        
        List<Integer> userIds = new ArrayList<>();
        List<User> users = userController.getUsers();
        
        for (User u : users){
            userIds.add(u.getId());
        }
        
        userIds.removeAll(reporterIds);
        for (int i : userIds){
            User u = userController.getUser(i);
            if("staff".equals(u.getPosition())){
                        this.selectReporterComboBox.addItem(u.getId()+" - "+u.getUsername());
            }
        }
    }//GEN-LAST:event_addReporterButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIReporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIReporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIReporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIReporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIReporter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addReporterButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteReporterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable reporterTable;
    private javax.swing.JComboBox<String> selectReporterComboBox;
    // End of variables declaration//GEN-END:variables
}
